<<<<<<< HEAD
"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=e(require("postcss-value-parser"));const r=e=>{const r=!("preserve"in Object(e))||Boolean(e.preserve);return{postcssPlugin:"postcss-overflow-shorthand",Declaration:(e,{result:t})=>{if("overflow"!==e.prop.toLowerCase())return;let s="",a="";const l=e.value;try{const e=o.default(l).nodes.slice().filter((e=>"comment"!==e.type&&"space"!==e.type));if(e.length<2)return;s=o.default.stringify(e[0]),a=o.default.stringify(e[1])}catch(o){return void e.warn(t,`Failed to parse value '${l}' as a shorthand for "overflow". Leaving the original value intact.`)}s&&a&&(s.toLowerCase()===a.toLowerCase()?e.cloneBefore({value:s}):(e.cloneBefore({prop:"overflow-x",value:s}),e.cloneBefore({prop:"overflow-y",value:a})),r||e.remove())}}};r.postcss=!0,module.exports=r;
=======
"use strict";const e=/^overflow/i;const o=o=>{const s=!("preserve"in Object(o))||Boolean(o.preserve);return{postcssPlugin:"postcss-overflow-shorthand",Declaration:(o,{list:r})=>{e.test(o)&&function(e,o,s){const[r,t,...n]=e.space(o.value);t&&!n.length&&(o.cloneBefore({prop:`${o.prop}-x`,value:r}),o.cloneBefore({prop:`${o.prop}-y`,value:t}),s||o.remove())}(r,o,s)}}};o.postcss=!0,module.exports=o;
>>>>>>> deddbab02d39a340219c9cd34980ec39c98978cd
